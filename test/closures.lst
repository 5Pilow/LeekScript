### Closures

// 1er cas basique : capture d'une variable du bloc a.

let a = 12
let f = x -> x + a // capture à la création de la fonction
f(5)  ===>  17

// 2ème cas, capture d'un paramètre a.

let g = a -> x -> x + a
let f = g(5) // capture au moment de la création de la fonction de retour
f(9)  ===>  14

// 3ème cas, capture un niveau au dessus : une fonction interne doit capturer une variable
donc la fonction parente doit la capturer aussi.

let a = 12
let f = function() [a] {
	
	let aux = [a] x -> {
		return a + x
	}
	aux(2)
}

