### Arrays

[]  ===>  []
[1]  ===>  [1]
[1, 2, 3]  ===>  [1, 2, 3]
[1.21, -5, 4.55, 12, -6.7]  ===>  [1.21, -5, 4.55, 12, -6.7]
[true, false, true]  ===>  [true, false, true]
[23, true, '', {}, 123]  ===>  [23, true, '', {}, 123]
[1, 2, 3] + [4, 5, 6]  ===>  [1, 2, 3, 4, 5, 6]
[] + 1  ===>  [1]
[] + 1 + 2 + 3  ===>  [1, 2, 3]
[1] + [2] + [3]  ===>  [1, 2, 3]
[1, 2, 3][1]  ===>  2
let a = [1, 2, 3] a[0]  ===>  1
let a = [1, 2, 3] a[0] = 5 a[0]  ===>  5
let a = [1, 2, 3] a[0] += 5 a[0]  ===>  6

let v = 12
let a = [v, 2, 3]
a[0] += 5
a[0]  ===>  17

let a = [23, 23, true, '', [], 123]; |a|  ===>  6
let a = [1, 2, 3]; ~a  ===>  [3, 2, 1]
let a = [1, 2, 3] a[1] = 12 a  ===>  [1, 12, 3]
[1.2, 321.42, 23.15]  ===>  [1.2, 321.42, 23.15]
[1, 2, 3, 4, 5][1:3]  ===>  [2, 3, 4]
2 in [1, 2, 3]  ===>  true
4 in [1, 2, 3]  ===>  false
'yo' in ['ya', 'yu', 'yo']  ===>  true
let a = 2 if (a in [1, 2, 3]) { 'ok' } else { 'no' }  ===>  'ok'
[1 2 3]  ===>  [1, 2, 3]
['yo' 'ya' 'yu']  ===>  ['yo', 'ya', 'yu']
[true false true true]  ===>  [true, false, true, true]
[1, 2, 3, 4] < [1, 2, 3, 5]  ===>  true
[1, 2, 4, 4] < [1, 2, 3, 5]  ===>  false
[1, 2, 3, 4.1] < [1, 2, 3, 5.1]  ===>  true
[1, 2, 4, 4.1] < [1, 2, 3, 5.1]  ===>  false
['1', '2', '3', '4'] < ['1', '2', '3', '5']  ===>  true
['1', '2', '4', '4'] < ['1', '2', '3', '5']  ===>  false
[1, 2, 3, 4] < [1, 2, 3, 5.1]  ===>  true
[1, 2, 4, 4.1] < [1, 2, 3, 5]  ===>  false
[1, 2, '3'] < [1, 2, 3]  ===>  false
[1, 1, '3'] < [1, 2, 3]  ===>  true


### Array operations

[1, 2, 3, 4, 5] ~~ x -> x ** 2  ===>  [1, 4, 9, 16, 25]
[1.5, 2.5, 3.5] ~~ x -> x.floor()  ===>  [1, 2, 3]
[1, 2, 3, 4, 5] ~~ (x -> x ** 2)  ===>  [1, 4, 9, 16, 25]
['yo', 'toto', 'salut'] ~~ x -> x + ' !'  ===>  ['yo !', 'toto !', 'salut !']
[1, 2, 3] ~~ x -> [x]  ===>  [[1], [2], [3]]
[1, 2, 3] ~~ x -> 'yo'  ===>  ['yo', 'yo', 'yo']
let f = x -> x * 10 [1, 2, 3] ~~ f  ===>  [10, 20, 30]
[1.2, 321.42] ~~ x -> x * 1.7  ===>  [2.04, 546.414]
[1, 2, 3, 4, 5] ~~ x -> x.max(3)  ===>  [3, 3, 3, 4, 5]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ~~ x -> x.max(3).min(8)  ===>  [3, 3, 3, 4, 5, 6, 7, 8, 8, 8]
[1] < [1, 2]  ===>  true

// let f = x -> x[0]; [f([1]), f([0..3])]


### Intervals

[1..10]  ===>  [1..10]
145 in [1..1000]  ===>  true
1 in [1..1000]  ===>  true
1000 in [1..1000]  ===>  true
0 in [1..1000]  ===>  false
1001 in [1..1000]  ===>  false
[0..1000][500]  ===>  500
[1..1000][500]  ===>  501
[1000..2000][12]  ===>  1012
[1..10]['hello']  ===>  SemanticException::ARRAY_ACCESS_KEY_MUST_BE_NUMBER <key 1>
// [1..10][-10]  ===>   must throw exception


### Array standard library

Array  ===>  <class Array>
Array()  ===>  []
new Array  ===>  []
new Array()  ===>  []

Array.size([1, 'yo', true])  ===>  3
Array.size([6, 4, 3, 2, -11])  ===>  5
[1, 'yo', true].size()  ===>  3
[1, -2, 3, -12, -6].size()  ===>  5

Array.average([1, 2, 3, 4, 5, 6])  ===>  3.5
Array.average([])  ===>  0
[1, 2, 3, 4, 5, 6].average()  ===>  3.5
[].average()  ===>  0
['salut', true, []].average()  ===>  0
[10, -5.7, 30.89, 66].average()  ~~~>  25.2975

Array.sum([10, -5, 30, 66])  ===>  101
[10, -5, 30, 66].sum()  ===>  101
Array.sum(['ab', 'cd', 'ef'])  ===>  'abcdef'
['ab', 'cd', 'ef'].sum()  ===>  'abcdef'
['abc', true, 12, [1, 2]].sum()  ===>  'abctrue12<array>'
[10, -5.7, 30.89, 66].sum()  ~~~>  101.19

Array.map([1, 2, 3], x -> x ** 2)  ===>  [1, 4, 9]
[3, 4, 5].map(x -> x ** 2)  ===>  [9, 16, 25]
[321, 213, 121].map(x -> x ** 2).size()  ===>  3
['a' 'b' 'c'].map(x -> x)  ===>  ['a', 'b', 'c']
[65 66 67].map(x -> x.char()).join('')  ===>  'ABC'

Array.map2([1, 'yo ', []], [12, 55, 9], (x, y -> x + y))  ===>  [13, 'yo 55', [9]]

let x = [1, 2, 3, 4] x.chunk(2)  ===>  [[1, 2], [3, 4]]
let x = [1, 2, 3, 4] x.chunk(3)  ===>  [[1, 2, 3], [4]]
let x = [1, 2, 3, 4] x.chunk()  ===>  [[1], [2], [3], [4]]

let x = [1, 1, 2, 2, 1] x.unique() x  ===>  [1, 2, 1]
let x = [1, 1, 2, 2, 1] x.sort() x.unique() x  ===>  [1, 2]
let x = ['a', 'a', 'b'] x.unique() x  ===>  ['a', 'b']
let x = ['a', 'b', 'c'] x.unique() x  ===>  ['a', 'b', 'c']
let x = ['a', 'a', 'b', 'a', 'a'] x.unique() x  ===>  ['a', 'b', 'a']

let x = [3, 1, 2]
x.sort()
x  ===>  [1, 2, 3]

let x = ['foo', 'yop', 'abc']
x.sort()
x  ===>  ['abc', 'foo', 'yop']

let x = [[[]], [[], [], []], [[], []]]
x.sort()
x  ===>  [[[]], [[], []], [[], [], []]]

let x = [[1, 2, 3], [3, 1, 2], [2, 3, 1]]
x.sort()
x  ===>  [[1, 2, 3], [2, 3, 1], [3, 1, 2]]

Array.filter([1, 2, 3, 10, true, 'yo'], x -> x > 2)  ===>  [3, 10, 'yo']
[3, 4, 5].filter(x -> x > 6)  ===>  []

Array.contains([1, 2, 3, 10, 1], 1)  ===>  true
[3, 4, 5].contains(6)  ===>  false

Array.isEmpty([])  ===>  true
[3, 4, 5].isEmpty()  ===>  false
//let a = 0 Array.iter([1,2,3], x -> a += x) a  ===>  6
//let a = 2 [1,2,3].iter(x -> a *= x) a  ===>  12

Array.partition([1, 2, 3, 4, 5], (x -> x < 3))  ===>  [[1, 2], [3, 4, 5]]
Array.partition([1, 2, 3, 10, true, 'yo'], x -> x > 2)  ===>  [[3, 10, 'yo'], [1, 2, true]]
[1, 2, 3, 4, 5].partition(x -> x > 3)  ===>  [[4, 5], [1, 2, 3]]
[1, 2, 3, 4, 5].partition(x -> x == 3)  ===>  [[3], [1, 2, 4, 5]]
[1, 2, 3, 4, 5, 6].filter(x -> x > 2).partition(x -> x > 4)  ===>  [[5, 6], [3, 4]]
// [1, 2, 3, 4, 5].partition(x -> 'yolo')  ===>  **error**

Array.first([1, 2, 3, 10, true, 'yo', null])  ===>  1
['yo', 3, 4, 5].first()  ===>  'yo'
Array.last([1, 2, 3, 10, true, 'yo', null])  ===>  null
// ['yo', 3, 4, 5].last()  ===>  5

// TODO : the return type of first() must be the element type of the array if it's homogeneous
//	[[321, 21], [23, 212], [654, 9876]].first().last()  ===>  21

Array.foldLeft([1, 2, 3, 10, true, 'yo', null], (x, y -> x + y), 'concat:')  ===>  'concat:12310trueyonull'
Array.foldRight([1, 2, 3, 10, true, 'yo', null], (x, y -> x + y), 'concat:')  ===>  16

//	Array.shuffle([1, 2, 3, 10, true, 'yo', null])  ===>  test shuffle ?

Array.reverse([1, 2, 3, 10, true, 'yo', null])  ===>  [null, 'yo', true, 10, 3, 2, 1]
[null].reverse()  ===>  [null]
[].reverse()  ===>  []
[1, 2, 3].reverse()  ===>  [3, 2, 1]
Array.search([1, 2, 3, 10, true, 'yo', null], 10, 0)  ===>  3

Array.search([1, 2, 3, 4, 5], 5, 0)  ===>  4
Array.search([1, 2, 3, 10, true, 'yo', null], 3, 3)  ===>  -1
[1, 2, 3, 10, true, 'yo', null].search('yo', 0)  ===>  5
Array.search([1, 2, 3, 10, true, 'yo', null], false, 0)  ===>  -1
[null].search(null, 0)  ===>  0

Array.subArray([1, 2, 3, 10, true, 'yo', null], 3, 5)  ===>  [10, true, 'yo']
Array.subArray([1, 2, 3, 10, true, 'yo', null], 3, 1)  ===>  []
Array.subArray([1, 2, 3, 10, true, 'yo', null], 0, 100)  ===>  [1, 2, 3, 10, true, 'yo', null]
Array.subArray([1, 2, 3, 10, true, 'yo', null], 1, 1)  ===>  [2]

[].pop()  ===>  null
Array.pop(['1', '2'])  ===>  '2'
['1', '2'].pop()  ===>  '2'
let a = ['1', '2', '3'] a.pop() a  ===>  ['1', '2']

let a = [1, 2, 3] Array.push(a, 4)  ===>  [1, 2, 3, 4]
[].push([])  ===>  [[]]
[0].pushAll([1, 2, 3])  ===>  [0, 1, 2, 3]
let a = [1, 2] a.push(3) a  ===>  [1, 2, 3]
//	let a = [1, 2] a.push(3.5) a  ===>  [1, 2, 3.5]
let a = [1.5, -2.9] a.push(3.5) a  ===>  [1.5, -2.9, 3.5]

Array.concat([], [true, 'yo'])  ===>  [true, 'yo']

[].join('a')  ===>  ''
['salut', 'ça', 'va'].join(' ')  ===>  'salut ça va'
[1, null, 'va'].join(' ')  ===>  '1 null va'

let a = [1, 2, 3] a.clear() a  ===>  []
let a = [1, 2, 3] Array.clear(a)  ===>  []

let a = [1, 2, 3] a.fill(12, 4) a  ===>  [12, 12, 12, 12]
let a = [] Array.fill(a, 'test', 2)  ===>  ['test', 'test']

let a = [1, 2, 3] Array.insert(a, 12, 1)  ===>  [1, 12, 2, 3]
let a = [1, 2, 3] Array.insert(a, 12, 6)  ===>  [1, 2, 3, 0, 0, 0, 12]

let a = [1, 2, 3] Array.remove(a, 1)  ===>  2
let a = [1, 2, 3] Array.remove(a, 1) a  ===>  [1, 3]
//	let a = [1, 2, 3] Array.remove(a, 1) a  ===>  [0: 1, 2: 3]
let a = [1, 2, 3] Array.remove(a, 1)  ===>  2

//	let a = [] Array.removeKey(a, 'key')  ===>  null
//	let a = [1, 2, 3] a.insert('test', 'key') a.removeKey('key')  ===>  'test'
//	let a = [1, 2, 3] a.insert('test', 'key') a.removeKey('key') a  ===>  [0: 1, 1: 2, 2: 3]

let a = [1, 2, 3] a.removeElement(1) a  ===>  [2, 3]
let a = [1, 2, 3] a.removeElement('key') a  ===>  [1, 2, 3]

/*
3 ~ x -> x ^ x  ===>  27
[1, 2, 3] ~ x -> x + 4  ===>  [1, 2, 3, 4]
[1, 2, 3] ~~ print  ===>  [null, null, null]
[1, 2, 3] ~~ x -> [x, x]  ===>  [[1, 1], [2, 2], [3, 3]]
let s = 0 let a = [1, 2, 3, 4] let f = x -> s += x a ~~ f s  ===>  10
let s = 0 [1, 2, 3, 4, 5].each(x -> s += x)  ===>  15
[1, 2, 3, 4, 5].fold_left(+,0)  ===>  15
//let f = x -> x + 10 let g = x -> x ^ 2 [1, 2, 3] ~~ f ~~ g  ===>  [121, 144, 169]
//[1, 2, 3] ~~ (x -> x * 5) ~~ (x -> x - 1)  ===>  [4, 9, 14]
*/

/*
[1, 2, 3] ~~= (x -> x * 5 + 2)
[1, 2, 3] ~+= 1   =>   [2, 3, 4]
[1, 2, 3] ~*= 5
[1, 2, 3] ~= (x -> x * 5)
*/

// let a = [for let i = 0; i < 100; i++ do i end]
// a[10:*]
// a[] = 12 (a += 12)


